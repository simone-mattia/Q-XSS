from collections import defaultdict

# XSS PAYLOAD STRUCTURE
#
# aaaaaa     |      ">        |   <img src=x onerror=     print()      />     |   <p id="      | aaaaaa 
# padding_sx | html_syntax_sx |       html_body        |    js    | html_body | html_syntax_dx | padding_dx
# padding    |                html                     |    js    |          html              | padding
#                                                   payload
#
# EXPECTED RESPONSE STRUCTURE
#
#      ">        |   <img src=x onerror=     print()      />     |   <p id="      
# html_syntax_sx |       html_body        |    js    | html_body | html_syntax_dx 
#                html                     |    js    |          html              
#                                 expected response

from collections import defaultdict


class XssExploit:

    # Constructor that initiates all fields
    def __init__(self):
        
        # PAYLOAD STRUCTURE
        self.payload_structure = dict()

        # Payload js
        self.payload_structure["js_body"] = ""
        self.payload_structure["js"] = lambda: self.payload_structure["js_body"]

        # Payload html
        self.payload_structure["html_body"] = "" 
        self.payload_structure["html_syntax_padding_sx"] = ""
        self.payload_structure["html_syntax_padding_dx"] = ""
        self.payload_structure["html"] = lambda: self.payload_structure["html_syntax_padding_sx"] + self.payload_structure["html_body"] + self.payload_structure["html_syntax_padding_dx"]
        
        # Payload not reflected padding
        self.payload_structure["padding_sx"] = ""
        self.payload_structure["padding_dx"] = ""

        # Xss payload
        self.payload = lambda: self.payload_structure["padding_sx"] + str(self.payload_structure["html"]()).replace("{}", self.payload_structure["js"](), 1) + self.payload_structure["padding_dx"]

        # EXPECTED RESPONSE STRUCTURE
        self.expected_structure = dict()

        # Expected js response
        self.expected_structure["js_body"] = ""
        self.expected_structure["js"] = lambda: self.expected_structure["js_body"]

        # Expected html response
        self.expected_structure["html_body"] = "" 
        self.expected_structure["html_syntax_padding_sx"] = ""
        self.expected_structure["html_syntax_padding_dx"] = ""
        self.expected_structure["html"] = lambda: self.expected_structure["html_syntax_padding_sx"] + self.expected_structure["html_body"] + self.expected_structure["html_syntax_padding_dx"]

        # Expected response
        self.expected = lambda: str(self.expected_structure["html"]()).replace("{}", self.expected_structure["js"](), 1)

    # GET FUNCTIONS

    def getHtml(self):
        return self.expected_structure["html"]()
    
    # UPDATE FUNCTIONS

    # Update js
    def setJsBody(self, payload, expected):
        if payload != "":
            self.payload_structure["js_body"] = payload
        if expected != "":
            self.expected_structure["js_body"] = expected

    # Update html body
    def setHtmlBody(self, payload, expected):
        if payload != "":
            self.payload_structure["html_body"] = payload
        if expected != "":
            self.expected_structure["html_body"] = expected

    # Update html syntax padding
    def setHtmlSyntaxPaddings(self, payload_sx, payload_dx, expected_sx, expected_dx):
        if payload_sx != "":
            self.payload_structure["html_syntax_padding_sx"] = payload_sx
        if payload_dx != "":
            self.payload_structure["html_syntax_padding_dx"] = payload_dx
        if expected_sx != "":
            self.expected_structure["html_syntax_padding_sx"] = expected_sx
        if expected_dx != "":
            self.expected_structure["html_syntax_padding_dx"] = expected_dx

    # Update padding
    def setPaddings(self, sx, dx):
        if sx != "":
            self.payload_structure["padding_sx"] = sx
        if dx != "":
            self.payload_structure["padding_dx"] = dx

    # Based on the isPayload parameter replace fieldName in the payload or in the expected structure with the following parameters
    def replaceValues(self, isPayload, fieldName, old, new):
        if isPayload:
            self.payload_structure[fieldName] = str(self.payload_structure[fieldName]).replace(old, new)
        else:
            self.expected_structure[fieldName] = str(self.expected_structure[fieldName]).replace(old, new)